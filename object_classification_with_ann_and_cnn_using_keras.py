# -*- coding: utf-8 -*-
"""object classification with ANN and CNN using Keras

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mn9OozImDrrc1Bf7gFg0-GgLcF0cXbEW
"""

from keras.datasets import cifar10
import matplotlib.pyplot as plt
import numpy as np

# load data
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

X_train.shape,y_train.shape

#checking for a image
plt.imshow(X_train[1])

X_train[0]

"""here we see values are between 0 - 255
so we can normalize them and bring between 0 - 1
"""

X_train[0]/255.0

#doing this for all test and train data
X_train = X_train / 255
X_test = X_test / 255

#since for making classification report we need y_test which is not one hot encoded therefore we store it in r_test
r_test = y_test

from keras.utils import np_utils

# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)

y_train[0:5]

from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten

#building a ANN 
#model creation
modelann = Sequential()
modelann.add(Dense(units=32,activation='relu',input_shape=(32,32,3)))
modelann.add(Flatten())
modelann.add(Dense(units = 400 , activation='relu'))
modelann.add(Dense(units = 100 , activation='relu'))
modelann.add(Dense(units = 10 , activation='sigmoid'))

modelann.summary()

#since we one hot encoded the labels therefore we use categorical crossentrophy if we hadn't hot encoded it then we would have used sparse categorical crossentrophy
modelann.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

modelann.fit(X_train,y_train,epochs=6)

modelann.evaluate(X_test, y_test)

from mlxtend.plotting import plot_confusion_matrix
from sklearn.metrics import confusion_matrix

from sklearn.metrics import classification_report
y_pred = modelann.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]
print('\nClassification Report\n')
print(classification_report(r_test, y_pred_classes, target_names=["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]))
#here we needed r_test not y_test

r_pred = modelann.predict_classes(X_test)
#required for confusion matrix

mat = confusion_matrix(r_test , r_pred)
plot_confusion_matrix(conf_mat = mat, show_normed=False , figsize=(10,8))

"""**We saw the accuracy using ANN , now we will be building a CNN and then we will compare their perfromance**"""

from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D

#building a CNN 
#we need to add layers for feature extraction before our dense connected layer (convo + reLU , pooling) then flattenning then dense connected net..

#model creation
modelcnn = Sequential()
modelcnn.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(32,32,3)))
modelcnn.add(MaxPooling2D(pool_size=(2,2)))
modelcnn.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu', input_shape=(32,32,3)))
modelcnn.add(MaxPooling2D(pool_size=(2,2)))
#dense
modelcnn.add(Flatten())
modelcnn.add(Dense(units = 100 , activation='relu'))
modelcnn.add(Dense(units = 10 , activation='softmax'))

modelcnn.summary()

modelcnn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

modelcnn.fit(X_train,y_train,epochs=6)

modelcnn.evaluate(X_test, y_test)

from sklearn.metrics import classification_report
y1_pred = modelcnn.predict(X_test)
y1_pred_classes = [np.argmax(element) for element in y1_pred]
print('\nClassification Report\n')
print(classification_report(r_test, y1_pred_classes, target_names=["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]))
#here we needed r_test not y_test

"""**We see CNN gives a better accuracy for same epochs , ANN gives accuracy of 56 whereas CNN gives accuracy of 70**

"""

r1_pred = modelcnn.predict_classes(X_test)
#required for confusion matrix

#confusion matrix
mat = confusion_matrix(r_test , r1_pred)
plot_confusion_matrix(conf_mat = mat, show_normed=False , figsize=(10,8))

"""**Testing our model using test data set**

"""

r_test[0:5].reshape(-1)

y1_pred = modelann.predict(X_test)
y1_pred[0:5]

y1_classes = [np.argmax(element) for element in y1_pred]
y1_classes[0:5]

"""We see that for 5th image it gives wrong output for others it gives accurate output"""